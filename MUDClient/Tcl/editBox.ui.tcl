###########################################
# editBox.ui.tcl
# Defines box displayed on double clicking
# an object.
# Iain Ollerenshaw 17/2/98
# Version History:
# Date	Who Comments
# 17/2/98	IO	Created
###########################################
# interface generated by SpecTcl version 1.1 from Oli's HD:SHProject:MU Code:Client:Tcl:editBox.ui
#	root	is the parent window for this user interface
# Create the edit box dialog.
proc editBox_ui {root args}  {
    global objData selectObj
    # this treats "." as a special case
    if {$root == "."} {
        set base ""
    } else {
        set base $root
    }
    
    frame $base.frame#1

    label $base.label#1 \
    -text Name

    entry $base.nameEntry \
    -textvariable newName

    label $base.label#2 \
    -text {Top Left}

    entry $base.tlxEntry \
    -textvariable tlx \
    -width 5

    entry $base.tlyEntry \
    -textvariable tly \
    -width 5

    label $base.label#3 \
    -text {Bottom Right}

    entry $base.brxEntry \
    -textvariable brx \
    -width 5

    entry $base.bryEntry \
    -textvariable bry \
    -width 5

    label $base.label#4 \
    -text Layer

    entry $base.layerEntry \
    -textvariable newLayer \
    -width 5

    label $base.label#5 \
    -text Owner

    label $base.ownerLabel \
    -relief raised \
    -text label

    button $base.okayButton \
    -text Okay \
    -command {doEdit $newName $tlx $tly $brx $bry $newLayer; destroy .edit}

    button $base.revertButton \
    -text Revert

    button $base.cancelButton \
    -text Cancel \
    -command {destroy .edit}

    # Geometry management
    grid $base.frame#1 -in $root -row 1 -column 2 -columnspan 2
    grid $base.label#1 -in $root -row 1 -column 1 -sticky nesw
    grid $base.nameEntry -in $base.frame#1	-row 1 -column 2 -sticky nesw
    grid $base.label#2 -in $root -row 2 -column 1 -sticky nesw
    grid $base.tlxEntry -in $root -row 2 -column 2 -sticky nesw
    grid $base.tlyEntry -in $root -row 2 -column 3 -sticky nesw
    grid $base.label#3 -in $root -row 3 -column 1 -sticky nesw
    grid $base.brxEntry -in $root -row 3 -column 2 -sticky nesw
    grid $base.bryEntry -in $root -row 3 -column 3 -sticky nesw
    grid $base.label#4 -in $root -row 4 -column 1  -sticky nesw
    grid $base.layerEntry -in $root	-row 4 -column 2 -sticky nesw
    grid $base.label#5 -in $root -row 5 -column 1 -sticky nesw
    grid $base.ownerLabel -in $root	-row 5 -column 2 -sticky nesw
    grid $base.okayButton -in $root	-row 7 -column 1 -sticky nesw
    grid $base.revertButton -in $root -row 7 -column 2 -sticky nesw
    grid $base.cancelButton -in $root -row 7 -column 3 -sticky nesw

    # Resize behavior management
    grid rowconfigure $root 1 -weight 0 -minsize 30
    grid rowconfigure $root 2 -weight 0 -minsize 30
    grid rowconfigure $root 3 -weight 0 -minsize 30
    grid rowconfigure $root 4 -weight 0 -minsize 30
    grid rowconfigure $root 5 -weight 0 -minsize 30
    grid rowconfigure $root 6 -weight 0 -minsize 30
    grid rowconfigure $root 7 -weight 0 -minsize 30
    grid columnconfigure $root 1 -weight 0 -minsize 30
    grid columnconfigure $root 2 -weight 0 -minsize 30
    grid columnconfigure $root 3 -weight 0 -minsize 30
    grid rowconfigure $base.frame#1 1 -weight 0 -minsize 30
    grid columnconfigure $base.frame#1 1 -weight 0 -minsize 30

    # additional interface code
    # end additional interface code
}

# Allow interface to be run "stand-alone" for testing
catch {
    if [info exists embed_args] {
        # we are running in the plugin
        editBox_ui .
    } else {
        # we are running in stand-alone mode
        if {$argv0 == [info script]} {
            wm title . "Testing editBox_ui"
            editBox_ui .
        }
    }
}
